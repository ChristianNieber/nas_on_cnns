{
  //Evolutionary algorithm parameters
  "EVOLUTIONARY": {

    //Maximum number of generations
    "num_generations": 30,

    // my - number of parents
    "my" : 1,

    //lambda - number of offspring
    "lambda": 5,

    // popuplation size for generation 0
    "initial_population_size" : 1,

    // initial population, "lenet, "perceptron" or "random"
    "initial_individuals" : "lenet",

    // Experiment name is used for folder name where all files are stored
    "experiment_name" : "LeNet run 3",

    // random seed for Random and numpy modules, -1 for none
    "random_seed" : 100,

    // resume from saved state
    "resume": false,

    //rates of the different mutations [0, 1]
    "MUTATIONS": {
      "add_layer": 0.25,
      "reuse_layer": 0.15,
      "remove_layer": 0.25,
      "add_connection": 0,
      "remove_connection": 0,
      "dsge_layer": 0.15,
      "macro_layer": 0.3
    }
  },

  //network specific parameters
  "NETWORK": {
    //structure fo the hidden layers of the network [[non-terminal, min, max], ...]
    "network_structure": [["features", 1, 10], ["classification", 1, 5]],

    //output layer
    "output": "output",

    //macro blocks: currently only learning
    "macro_structure": ["learning"],

    //number of layers on random initialisation
    "network_structure_init": {"features":[2,3,4], "classification":[1]},

    //number of levels back for each of the blocks
    "levels_back": {"features": 1, "classification": 1}
  },

  //training parameters
  "TRAINING": {
    //data augmentation generator for the training data - keras interpretable
    //set to "None" if no data augmentation is to be used
    "datagen": "None",
    // "datagen":"ImageDataGenerator(preprocessing_function=augmentation)",

    //data augmentation generator for the validation and testing data - keras interpretable
    //Has to be similar to datagen but without data augmentation
    //set to "None" if no data augmentation is to be used
    "datagen_test": "None",
    // "datagen_test": "ImageDataGenerator()",

    //maximum training time for each network (in seconds)
    "max_training_time": 30,
    //maximum training epochs for each network
    "max_training_epochs": 30,

    //fitness function parameter: use penalty for large network
    "use_network_size_penalty" : true,
    //fitness function parameter: roughly number of connections worth the difference of 0.02 accuracy at an accuracy of 0.98
    "penalty_connections_target" : 62000,

    // test new elite individuals with final test set
    "best_retest_with_final_test_set" : true,
    // re-train best individual with K folds and find average accuracy and standard deviation, 0 to disable
    "best_k_folds" : 0,
    // only start K folds re-training after this generation number
    "best_k_folds_start_at_generation" : 0
  }
}